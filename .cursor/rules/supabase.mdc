---
description: 
globs: 
alwaysApply: false
---
---
description: Comprehensive best practices for developing with Supabase, covering code organization, performance, security, testing, and common pitfalls. This rule provides actionable guidance for developers to build robust and scalable applications using Supabase.
globs: **/*.{js,jsx,ts,tsx,sql}
---
# Supabase Best Practices: A Comprehensive Guide

This document outlines best practices for developing with Supabase, covering various aspects from code organization to security and performance.

## 1. Code Organization and Structure

A well-organized codebase is crucial for maintainability and scalability. Here's how to structure your Supabase project:

### 1.1. Directory Structure Best Practices

Adopt a modular structure that separates concerns:


project-root/
├── src/
│   ├── components/        # Reusable UI components
│   ├── pages/             # Page-level components (routes)
│   ├── services/          # Supabase client initialization and data fetching
│   │   ├── supabase.ts   # Supabase client initialization
│   │   ├── auth.ts       # Authentication-related functions
│   │   ├── database.ts   # Database interaction functions
│   ├── utils/             # Utility functions (e.g., date formatting)
│   ├── types/             # TypeScript types and interfaces
│   ├── hooks/             # Custom React hooks
│   ├── styles/            # Global styles and theme
│   └── App.tsx            # Main application component
├── migrations/        # Database migrations
├── tests/              # Unit and integration tests
├── .env                # Environment variables
└── package.json          # Project dependencies


### 1.2. File Naming Conventions

*   **Components:** Use PascalCase (e.g., `UserProfile.tsx`).
*   **Functions:** Use camelCase (e.g., `fetchUserData`).
*   **Variables:** Use camelCase (e.g., `userName`).
*   **Files:** Use kebab-case (e.g., `user-profile.tsx`).

### 1.3. Module Organization

*   Group related functionalities into modules.
*   Use clear and descriptive module names.
*   Export only what is necessary from each module to minimize the API surface.

### 1.4. Component Architecture

*   Favor small, reusable components.
*   Use a component-based approach (e.g., React, Vue.js) to build UIs.
*   Separate presentational components from container components to improve reusability and testability.

### 1.5. Code Splitting Strategies

*   Use dynamic imports to lazy-load modules.
*   Split large components into smaller chunks.
*   Implement route-based code splitting to load only the necessary code for each route.

## 2. Common Patterns and Anti-patterns

### 2.1. Design Patterns Specific to Supabase

*   **Repository Pattern:** Abstract database interactions behind a repository interface for better testability and maintainability.
*   **Observer Pattern:** Utilize Supabase's real-time capabilities to implement reactive UIs.

### 2.2. Recommended Approaches for Common Tasks

*   **Data Fetching:** Create reusable functions for fetching data from Supabase tables.
*   **Authentication:** Use Supabase Auth for user authentication and authorization.
*   **Real-time Updates:** Leverage Supabase Realtime for real-time data synchronization.
*   **File Storage:** Utilize Supabase Storage for managing file uploads and downloads.

### 2.3. Anti-patterns and Code Smells to Avoid

*   **Direct Database Access from UI Components:** This tightly couples the UI to the database and makes testing difficult. Use a service layer to abstract database interactions.
*   **Overusing Supabase Functions and Policies:** Keep business logic in your application code whenever possible to avoid vendor lock-in and improve testability.
*   **Manually Creating Tables Without an ORM:** Always use an ORM to manage your database schema and migrations.
*   **Ignoring Error Handling:** Implement proper error handling to prevent unexpected crashes and provide informative error messages to users.
*   **Storing Sensitive Data in Plain Text:** Never store sensitive data like passwords or API keys in plain text. Use encryption and secure storage mechanisms.

### 2.4. State Management Best Practices

*   Choose a state management library (e.g., Redux, Zustand, Recoil) based on your project's complexity.
*   Use local component state for simple UI state.
*   Centralize application state in a global store for complex data dependencies.
*   Use asynchronous actions to handle data fetching and updates.

### 2.5. Error Handling Patterns

*   Use try-catch blocks to handle exceptions.
*   Implement a global error handler to catch unhandled exceptions.
*   Log errors to a monitoring service for tracking and analysis.
*   Display user-friendly error messages to the user.

## 3. Performance Considerations

### 3.1. Optimization Techniques

*   **Indexing:** Add indexes to frequently queried columns to improve query performance.
*   **Query Optimization:** Use efficient SQL queries and avoid N+1 query problems.
*   **Caching:** Implement caching strategies to reduce database load.
*   **Connection Pooling:** Use connection pooling to reuse database connections and reduce overhead.

### 3.2. Memory Management

*   Avoid memory leaks by properly cleaning up resources.
*   Use garbage collection to reclaim unused memory.
*   Optimize data structures to reduce memory usage.

### 3.3. Rendering Optimization

*   Use memoization techniques to prevent unnecessary re-renders.
*   Virtualize long lists to improve rendering performance.
*   Optimize images and other assets to reduce file sizes.

### 3.4. Bundle Size Optimization

*   Use tree shaking to remove unused code.
*   Minify code to reduce file sizes.
*   Compress assets to reduce transfer times.

### 3.5. Lazy Loading Strategies

*   Lazy load images and other assets that are not immediately visible.
*   Implement infinite scrolling to load data in chunks as the user scrolls.
*   Use code splitting to load only the necessary code for each route.

## 4. Security Best Practices

### 4.1. Common Vulnerabilities and How to Prevent Them

*   **SQL Injection:** Prevent SQL injection by using parameterized queries and prepared statements.
*   **Cross-Site Scripting (XSS):** Sanitize user input to prevent XSS attacks.
*   **Cross-Site Request Forgery (CSRF):** Implement CSRF protection to prevent unauthorized requests.
*   **Authentication and Authorization Issues:** Secure your authentication and authorization mechanisms to prevent unauthorized access.

### 4.2. Input Validation

*   Validate all user input to prevent malicious data from entering your system.
*   Use server-side validation in addition to client-side validation.
*   Sanitize user input to remove potentially harmful characters.

### 4.3. Authentication and Authorization Patterns

*   Use Supabase Auth for user authentication and authorization.
*   Implement role-based access control (RBAC) to manage user permissions.
*   Use row-level security (RLS) to control data access at the row level.

### 4.4. Data Protection Strategies

*   Encrypt sensitive data at rest and in transit.
*   Use secure storage mechanisms to store API keys and other secrets.
*   Implement data masking to protect sensitive data from unauthorized access.

### 4.5. Secure API Communication

*   Use HTTPS to encrypt API traffic.
*   Implement API rate limiting to prevent abuse.
*   Validate API requests to prevent malicious input.

## 5. Testing Approaches

### 5.1. Unit Testing Strategies

*   Write unit tests for individual functions and components.
*   Use mocking and stubbing to isolate units of code.
*   Aim for high code coverage.

### 5.2. Integration Testing

*   Write integration tests to verify the interaction between different parts of your system.
*   Test the integration between your application and Supabase.

### 5.3. End-to-end Testing

*   Write end-to-end tests to simulate user interactions and verify the overall functionality of your application.
*   Use tools like Cypress or Playwright to automate end-to-end tests.

### 5.4. Test Organization

*   Organize tests into separate directories based on functionality.
*   Use descriptive test names.
*   Keep tests concise and focused.

### 5.5. Mocking and Stubbing

*   Use mocking to replace external dependencies with controlled substitutes.
*   Use stubbing to replace specific method calls with predefined values.
*   Avoid over-mocking, as it can make tests less reliable.

## 6. Common Pitfalls and Gotchas

### 6.1. Frequent Mistakes Developers Make

*   Not using an ORM for database schema management.
*   Over-relying on Supabase functions and policies for business logic.
*   Using Supabase-only features without considering open-source alternatives.
*   Ignoring error handling and security best practices.

### 6.2. Edge Cases to Be Aware Of

*   Handling large datasets efficiently.
*   Dealing with real-time data synchronization conflicts.
*   Managing user sessions and authentication tokens securely.

### 6.3. Version-Specific Issues

*   Be aware of breaking changes in Supabase and its dependencies.
*   Test your application thoroughly after upgrading Supabase or its dependencies.
*   Refer to the Supabase documentation for migration guides.

### 6.4. Compatibility Concerns

*   Ensure compatibility between your application and the Supabase client library.
*   Test your application on different browsers and devices.

### 6.5. Debugging Strategies

*   Use browser developer tools to debug client-side code.
*   Use server-side logging to track errors and performance issues.
*   Use the Supabase dashboard to monitor database activity.

## 7. Tooling and Environment

### 7.1. Recommended Development Tools

*   Supabase CLI: For local development and database management.
*   VS Code: For code editing and debugging.
*   Drizzle ORM: For database schema management.
*   Postman/Insomnia: For testing API endpoints.

### 7.2. Build Configuration

*   Use a build tool like Webpack or Parcel to bundle your code.
*   Configure your build tool to optimize for production.
*   Use environment variables to configure your application.

### 7.3. Linting and Formatting

*   Use ESLint to enforce code style and prevent errors.
*   Use Prettier to format your code automatically.
*   Integrate linting and formatting into your development workflow.

### 7.4. Deployment Best Practices

*   Use a CI/CD pipeline to automate deployments.
*   Deploy your application to a production-ready environment.
*   Monitor your application for errors and performance issues.

### 7.5. CI/CD Integration

*   Use a CI/CD tool like GitHub Actions or GitLab CI to automate your build, test, and deployment processes.
*   Configure your CI/CD pipeline to run tests and linting before deployment.
*   Use environment variables to configure your application in the CI/CD environment.

## 8. Database Workflow Design

*   **Avoid Direct Changes in Production**: Once your application is live, refrain from making database changes using the Supabase Dashboard. Instead, utilize migration tools and enforce access control to prevent unauthorized modifications.
*   **Multiple Environments**: Adopt a multi-stage development workflow (`local -> staging -> prod`). This approach allows for thorough testing and validation at each stage before changes are deployed to production.
*   **Point-in-Time Recovery**: As your database grows, consider moving to Point-in-Time Recovery (PITR) to minimize the impact on database performance during maintenance and ensure data safety.
*   **Database Migrations**: Use database migration tools to manage schema changes. This practice helps maintain consistency across different environments and simplifies version control.
*   **Access Control**: Be mindful of who has access to your production environment. Limit access to experienced team members and set clear internal workflows to mitigate risks.
*   **Security**: Regularly review and update your security measures. Ensure that tables with sensitive data have appropriate access levels and that database secrets and API keys are stored securely.
*   **Performance Monitoring**: Utilize Supabase's observability tooling to monitor database performance and optimize queries, indexes, and connection management.

## 9. Additional Best Practices

*   **Understand Shared Responsibilities:** When using Supabase, be aware of the shared responsibilities model. Supabase manages infrastructure, but you are responsible for application architecture, security, and data management.
*   **Proper Indexing:** Essential for query optimization. Indices should be created based on common query patterns to reduce search time.
*   **Load Testing**: Before deploying changes to production, perform load testing in a staging environment. Tools such as `k6` can simulate traffic and help identify potential bottlenecks.
*   **Resource Upgrades**: Monitor resource usage and upgrade your database when necessary. For significant traffic surges, contact support in advance for assistance.
*   **Database Optimization**: Regularly optimize your database by adding filters on large queries, using caching strategies, and managing connections efficiently.
*   **Regular Backups:** Schedule regular backups of your database to protect against data loss.
*   **Use of Postgres Features**: As Supabase is built around Postgres, understand and leverage Postgres features for performance and scalability.

## 10. Conclusion

By following these best practices, you can build robust, scalable, and secure applications with Supabase. Remember to stay up-to-date with the latest Supabase documentation and community resources to continuously improve your development practices.


@file ./supabase_code_examples.mdc

# Supabase Advanced Guide for CMG Dashboard

This document provides advanced Supabase-specific guidance for the CMG Dashboard project, focusing on patterns, performance, and security considerations that complement the main `[coding-rule.mdc](mdc:.cursor/rules/coding-rule.mdc)`.

Refer to `[coding-rule.mdc](mdc:.cursor/rules/coding-rule.mdc)` for:
- General Supabase setup and client initialization (`[src/lib/supabase.ts](mdc:src/lib/supabase.ts)`, `[src/lib/supabase-server.ts](mdc:src/lib/supabase-server.ts)`).
- The dual patterns for database interaction (Supabase JS Client vs. Raw SQL via MCP).
- Authentication flow and RLS basics.

## 1. `execute_sql` RPC Function (MCP Backend)

The `execute_sql` PostgreSQL function is critical for the MCP pattern (see `[src/lib/mcp.ts](mdc:src/lib/mcp.ts)` and `[src/app/api/mcp/supabase/route.ts](mdc:src/app/api/mcp/supabase/route.ts)`). When working with or designing queries for this RPC:

-   **Security is Paramount:**
    -   The `/api/mcp/supabase/route.ts` currently uses the **anon key**. Security relies on the `execute_sql` function itself.
    -   If `execute_sql` uses `SECURITY DEFINER`, ensure the defining user has minimal necessary privileges.
    -   The function **MUST** be robust against SQL injection. It should ideally use `EXECUTE ... USING ...` with the `query_params` for any dynamic values within the `query_text` if `query_text` acts as a statement template. Direct concatenation of `query_text` is dangerous.
    -   Carefully validate `query_text` if it allows varied SQL commands. Consider restricting the types of SQL statements or target tables/schemas.
-   **Parameter Handling:**
    -   Ensure `query_params` from the client are correctly passed to and utilized by the `execute_sql` function, typically via an `EXECUTE` statement's `USING` clause.
-   **Error Propagation:**
    -   The function should propagate SQL errors clearly so the API route can return meaningful error messages.
-   **Return Values:**
    -   The data returned by `execute_sql` should be an array of records, as the API route currently returns `{ rows: data }`.

## 2. Row Level Security (RLS) - Advanced & Performance

RLS is vital for data protection in this multi-tenant (agency-based) application. For detailed instructions on creating RLS policies, refer to `[create-rls-policies.mdc](mdc:.cursor/rules/create-rls-policies.mdc)`.

### 2.1. RLS Performance Recommendations

Every authorization system has an impact on performance. While row level security is powerful, the performance impact is important to keep in mind. This is especially true for queries that scan every row in a table.

Based on a series of [tests](https://github.com/GaryAustin1/RLS-Performance), we have a few recommendations for RLS:

-   **Add Indexes:**
    -   Ensure you've added [indexes](mdc:docs/guides/database/postgres/indexes) on any columns used within your RLS Policies which are not already indexed (or primary keys).
    -   For a Policy like `USING ( (select auth.uid()) = user_id )` on `your_table`, add an index: `CREATE INDEX idx_your_table_user_id ON your_table(user_id);`
    -   For policies filtering by `agency_id`, ensure `agency_id` columns are indexed.

-   **Call `auth` functions with `SELECT`:**
    -   You can use a `SELECT` statement to improve policies that use functions. Instead of:
        ```sql
        CREATE POLICY "Users can access their own records" ON test_table
        TO authenticated
        USING ( auth.uid() = user_id );
        ```
    -   You can do:
        ```sql
        CREATE POLICY "Users can access their own records" ON test_table
        TO authenticated
        USING ( (SELECT auth.uid()) = user_id );
        ```
    -   This method works well for JWT functions like `auth.uid()` and `auth.jwt()` as well as `SECURITY DEFINER` functions. Wrapping the function causes an `initPlan` to be run by the Postgres optimizer, which allows it to "cache" the results per-statement, rather than calling the function on each row.
    -   **Caution:** You can only use this technique if the results of the query or function do not change based on the row data being filtered.

-   **Minimize Joins in Policies:**
    -   Rewrite policies to avoid joins between the source table (the one the policy is on) and other tables *within the policy definition itself*.
    -   Instead, try to organize your policy to fetch all relevant filter criteria from other tables into an array or set, then use `IN` or `ANY` operations.
    -   **Slow Policy (with join in subquery):**
        ```sql
        CREATE POLICY "Users can access records belonging to their teams" ON data_table
        TO authenticated
        USING (
          (SELECT auth.uid()) IN (
            SELECT user_id
            FROM team_user_link
            WHERE team_user_link.team_id = data_table.team_id -- Implicit join to data_table.team_id
          )
        );
        ```
    -   **Rewritten (faster) Policy (no join in subquery):**
        ```sql
        CREATE POLICY "Users can access records belonging to their teams" ON data_table
        TO authenticated
        USING (
          data_table.team_id IN (
            SELECT team_id
            FROM team_user_link
            WHERE user_id = (SELECT auth.uid()) -- No join to data_table here
          )
        );
        ```

-   **Specify Roles in Policies (`TO` clause):**
    -   Always use the Role(s) inside your policies, specified by the `TO` clause (e.g., `TO authenticated`).
    -   This prevents the `USING` clause from running unnecessarily for roles the policy doesn't apply to (e.g., `anon` users if the policy is `TO authenticated`).

## 3. Supabase Admin Client

The project includes a helper to create a Supabase admin client in `[src/lib/supabase-server.ts](mdc:src/lib/supabase-server.ts)`:
```typescript
// From src/lib/supabase-server.ts
export function createAdminClient() {
  // ... uses process.env.SUPABASE_SERVICE_ROLE_KEY ...
}
```
-   **Usage:** This client uses the `SUPABASE_SERVICE_ROLE_KEY` and bypasses RLS.
-   **When to Use:**
    -   Only in secure server-side environments (e.g., Next.js API routes, server components performing administrative tasks, or within Supabase Edge Functions if appropriate).
    -   For operations that legitimately need to bypass RLS, such as administrative scripts, data seeding, or backend processes that operate across all data.
-   **Caution:** Avoid using the admin client for regular user-driven data access, as this negates RLS. Prefer RLS-respecting clients for user operations.

## 4. Real-time Subscriptions

-   If implementing real-time features using Supabase subscriptions:
    -   Ensure proper subscription cleanup (e.g., in `useEffect` return functions) to prevent memory leaks and unnecessary connections.
    -   Handle subscription events efficiently.
    -   Be mindful of the number of concurrent real-time connections allowed by your Supabase plan.
    -   RLS policies apply to real-time subscriptions. Ensure policies allow subscribed users to receive the data.

## 5. Database Functions (Beyond `execute_sql`)

When creating other database functions (as guided by `[create-db-functions.mdc](mdc:.cursor/rules/create-db-functions.mdc)`):
-   Consider if they truly need to be database functions or if the logic can reside in the service layer (`src/services/`).
-   For functions called by RLS policies or that need to be highly performant, follow the volatility (`IMMUTABLE`, `STABLE`, `VOLATILE`) and `search_path` guidelines strictly.
-   Remember that `SECURITY DEFINER` functions execute with the permissions of the function owner. Use with extreme caution and only when necessary to grant specific, limited elevated privileges. `SECURITY INVOKER` is the default and generally safer.