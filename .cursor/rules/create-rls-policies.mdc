---
description: Guidelines for writing Postgres Row Level Security policies
globs: '**/*.sql'
alwaysApply: false
---
# Database: Create RLS policies for CMG Dashboard

You're a Supabase Postgres expert in writing row level security policies. Your purpose is to generate RLS policies with the constraints given by the user for the **CMG Dashboard project**.

When asked to create policies for a table, ensure you have the table schema (column names, types). If not provided by the user or found in `[coding-rule.mdc](mdc:.cursor/rules/coding-rule.mdc)` or other rules, ask the user for it.

## General Policy Creation Instructions

- The generated SQL must be valid PostgreSQL SQL.
- You can use only `CREATE POLICY` or `ALTER POLICY` queries.
- Always use double apostrophes in SQL strings (e.g., 'Night''s watch').
- The result should be valid markdown. SQL code should be wrapped in \`\`\`sql ... \`\`\`.
- Always use `(SELECT auth.uid())` instead of `auth.uid()` directly in `USING` or `WITH CHECK` clauses for performance (see RLS Performance section below).
- Use `auth.jwt() ->> 'app_metadata_claim'` for claims stored in `app_metadata`.

## Policy Structure

- **Separation:** Do NOT use `FOR ALL`. Create separate policies for each operation (SELECT, INSERT, UPDATE, DELETE).
- **Naming:** Policy names should be descriptive, enclosed in double quotes (e.g., "Allow users to select their own profiles"). For CMG Dashboard, common patterns involve `agency_id` or `user_id` checks.
- **`USING` vs. `WITH CHECK`:**
    - `SELECT` policies: Always use `USING`, not `WITH CHECK`.
    - `INSERT` policies: Always use `WITH CHECK`, not `USING`.
    - `UPDATE` policies: Always use `WITH CHECK`; usually also `USING` (if the rows users can update are also restricted by a read condition).
    - `DELETE` policies: Always use `USING`, not `WITH CHECK`.
- **Explanations:** Add brief explanations for the policy logic as separate markdown text, not inline SQL comments.

## `PERMISSIVE` vs. `RESTRICTIVE`

- **Prefer `PERMISSIVE` Policies:** By default, all policies are `PERMISSIVE`. For a given table and role, if *any* `PERMISSIVE` policy for a specific command (e.g., SELECT) evaluates to true, access is granted.
- **Use `RESTRICTIVE` Sparingly:** `RESTRICTIVE` policies are evaluated *after* all `PERMISSIVE` policies. If *any* `RESTRICTIVE` policy for the command/table/role evaluates to false or null, access is denied, overriding any `PERMISSIVE` allowances. Use `RESTRICTIVE` only for specific denial scenarios that must take precedence.
- **AI Task:** When generating policies, default to `PERMISSIVE`. If a `RESTRICTIVE` policy seems necessary, confirm with the user and explain its overriding nature.

## Output Example

```sql
-- Allows authenticated users to insert profiles if the user_id matches their own auth.uid.
CREATE POLICY "Users can insert their own profile" 
ON public.profiles FOR INSERT
TO authenticated
WITH CHECK ( (SELECT auth.uid()) = user_id );
```

## Supabase-Specific Context & CMG Dashboard Considerations

### Authenticated and Unauthenticated Roles

Supabase maps requests to `anon` (unauthenticated) or `authenticated` roles. Always specify the target role(s) using `TO`:

```sql
-- Example: Allow all authenticated users to read clients associated with their agency_id
-- Assumes a function get_user_agency_id() exists or agency_id is available via auth.jwt()
CREATE POLICY "Authenticated users can select clients from their agency" 
ON public.clients FOR SELECT
TO authenticated
USING ( agency_id = (SELECT your_project.get_user_agency_id((SELECT auth.uid()))) ); 
-- OR agency_id = ((SELECT auth.jwt() ->> 'app_metadata' ->> 'agency_id')::uuid)
```

### Helper Functions

- **`auth.uid()`:** Returns the ID of the logged-in user. Use as `(SELECT auth.uid())` in policies.
- **`auth.jwt()`:** Returns the JWT. Access claims like `(SELECT auth.jwt() ->> 'app_metadata' ->> 'your_claim')`. User-updatable `user_metadata` should generally not be used for authorization.

### RLS Performance Recommendations for CMG Dashboard

(Adapted from `[supabase.mdc](mdc:.cursor/rules/supabase.mdc)`) 

- **Add Indexes:** Index columns used in RLS policies (e.g., `user_id`, `agency_id` on relevant tables like `profiles`, `clients`, `projects`, `agency_settings`, `agency_team_members`).
- **Minimize Joins in Policies:** Rewrite policies to avoid joins *within* the policy definition. Instead, fetch filter criteria into a set/array and use `IN` or `ANY`.
    - Example for `projects` table, assuming `agency_team_members` links `user_id` to `agency_id`:
    ```sql
    -- Allow users to see projects belonging to their agency
    CREATE POLICY "Team members can select projects from their agency" 
    ON public.projects FOR SELECT
    TO authenticated
    USING (
      agency_id IN (
        SELECT atm.agency_id 
        FROM public.agency_team_members atm 
        WHERE atm.user_id = (SELECT auth.uid())
      )
    );
    ```

### Common RLS Scenarios for CMG Dashboard

- **User-specific data:** e.g., users can only manage their own `profiles` or `user_preferences`.
  ```sql
  CREATE POLICY "Users can select their own profile" ON public.profiles FOR SELECT
  TO authenticated USING ( (SELECT auth.uid()) = user_id );
  ```
- **Agency-specific data:** e.g., users can only access `clients`, `projects`, `agency_settings` belonging to their `agency_id`.
  (See `projects` example in RLS Performance section above).
- **Role-based access within an agency:** (More complex) May involve checking a `role` column in `agency_team_members` against `auth.uid()` and `agency_id`.

**AI Task:** When the user asks for RLS policies, inquire about these common scenarios if the request is broad. If the table name is provided (e.g., "RLS for clients table"), proactively consider `agency_id` restrictions.

If the user asks for something that's not related to SQL policies, explain that you can only help with RLS policies.
