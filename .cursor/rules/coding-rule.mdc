---
description: 
globs: 
alwaysApply: true
---
# CMG Dashboard - Marketing Agency CRM

# Cursor Brain Rules - Project-specific coding standards and AI assistance guidelines

## Project Overview

This project is a CRM for marketing agencies, helping them manage clients, view invoices, and more.
The application uses Next.js, Supabase, TypeScript, and follows modern best practices.

## CRITICAL RULE - DO NOT CHANGE SYSTEM ARCHITECTURE

**NEVER CHANGE THE UNDERLYING SYSTEM ARCHITECTURE OR LIBRARIES WHEN MAKING IMPROVEMENTS.**

When asked to improve or fix something:
- DO NOT switch to different libraries or packages
- DO NOT change how authentication or other core systems work
- DO NOT replace working code with "better" alternatives
- ONLY make minimal, targeted changes to address the specific request
- MAINTAIN consistency with the existing codebase
- PRESERVE the current implementation patterns

This is a strict rule because changing system architecture has repeatedly broken functionality.

## CRITICAL RULE - DEVELOPMENT WORKFLOW

**NEVER RUN `npm run build` DURING DEVELOPMENT.**

During development:
- ONLY use `npm run dev` for running the application
- NEVER use `npm run build` until the application is ready for production
- DO NOT suggest production deployment steps during active development
- For fixing development issues, focus on code changes, not build processes
- If there are styling or other issues, look for code problems, not build problems

The build command is exclusively for production preparation, not for development or troubleshooting.

## MCP Integration

The project uses a custom mechanism for some raw SQL queries, referred to as MCP (Model Context Protocol).
- The client-side implementation is in `[src/lib/mcp.ts](mdc:src/lib/mcp.ts)`. Services like `ClientService`, `ProjectService`, and `AgencyService` use `MCP.supabase.query()` to send SQL queries.
- These queries are routed to a Next.js API endpoint: `[src/app/api/mcp/supabase/route.ts](mdc:src/app/api/mcp/supabase/route.ts)`.
- This API route then calls a PostgreSQL function (RPC) in Supabase named `execute_sql`, passing the SQL query string and parameters.
- **Security Note**: The `/api/mcp/supabase/route.ts` API handler currently uses the hardcoded public Supabase anonymous key for its Supabase client when invoking the `execute_sql` RPC. The security of this setup relies heavily on the robustness and security measures implemented within the `execute_sql` PostgreSQL function itself (e.g., if it's `SECURITY DEFINER` and properly sanitizes/handles inputs).
- The `.cursor/mcp.json` file contains a full database connection string. For enhanced security (especially if `execute_sql` is not `SECURITY DEFINER` or requires specific privileges), this connection string (or its credentials) should ideally be used by the `/api/mcp/supabase/route.ts` backend when creating its Supabase client, instead of relying on the anonymous key.

## Database Schema

- Main tables from `auth` schema (e.g., `auth.users`). The application's public schema includes:
    - `users`: (Often a view or table mirroring `auth.users` but in public schema, includes `agency_id` foreign key in this application's context).
    - `profiles`: Stores user-specific details like full name, avatar URL, job title, social links. Linked one-to-one with `auth.users`.
    - `agencies`: Information about marketing agencies.
    - `agency_team_members`: Manages users within an agency, their roles, and permissions.
    - `agency_settings`: Stores various agency-level configurations (general, billing, notifications, team, security, integrations), often in JSONB columns within a single row per agency.
    - `clients`: Client information.
    - `projects`: Projects for clients.
    - `invoices`: Invoices for projects/clients.
    - `invoice_items`: Line items for invoices.
    - `notifications`: User notifications.
    - `user_preferences`: User-specific application preferences (theme, language, etc.).
    - `security_logs`: Audit trail for important user actions.
    - `metrics`, `client_categories`, `client_activity`: Tables supporting the dashboard views, often populated by aggregated data or specific tracking.
- Authentication handled through Supabase Auth (auth schema).
- Use Row Level Security (RLS) policies for data protection, especially critical given the MCP integration pattern.
- Agency-client relationship is managed (details may be in `agency_clients` table or derived).

## Technology Stack

- React 18.3.1
- Next.js 15.2.2 (App Router)
- TypeScript
- Supabase for authentication and database.
    - Client Libraries: The project currently uses helper functions from `@supabase/auth-helpers-nextjs` (e.g., `createClientComponentClient`, `createServerComponentClient`, `createMiddlewareClient`, `createRouteHandlerClient`) for Supabase client interaction. While this rule previously mentioned `@supabase/ssr` as preferred, ensure consistency with existing helpers or plan a clear migration strategy if a switch to `@supabase/ssr`'s `createBrowserClient`/`createServerClient` is intended.
- Tailwind CSS for styling.
    - Utilities: `clsx` and `tailwind-merge` (via the `cn` function in `[src/lib/utils.ts](mdc:src/lib/utils.ts)`).
- Radix UI for component primitives.
- Icons: `lucide-react`.
- Charting: `chart.js`, `react-chartjs-2`, `recharts`.
- Forms: React Hook Form with Zod for schema validation.
- Schema Validation: Zod (schemas typically in `[src/lib/schemas/](mdc:src/lib/schemas)`).
- State Management:
    - Global Client-Side: Zustand (e.g., `[src/lib/stores/auth-store.ts](mdc:src/lib/stores/auth-store.ts)`).
    - Server State: Currently managed via custom React hooks that call service classes (see AI Assistant Guidelines).
- Date Handling: `date-fns`.
- Toast Notifications: `sonner`.

## Code Style and Structure

### File Structure

```
src/
├── app/ # Next.js app router (pages and layouts)
    ├── api/ # API route handlers (e.g., for MCP, test notifications)
    │   ├── mcp/supabase/route.ts
    │   └── ...
    ├── auth/ # Authentication pages
    ├── dashboard/ # Dashboard pages and sections
    │   ├── clients/
    │   ├── profile/
    │   └── settings/
    └── ...
├── components/ # Reusable UI components
    ├── auth/
    ├── dashboard/
    ├── layout/ # Includes DashboardLayout and potentially unconventional utilities like create-test-notifications.ts
    ├── profile/
    ├── settings/
    └── ui/ # UI component library (Radix UI based, charts, etc.)
├── context/ # React context providers (e.g., AuthProvider)
├── db/ # Potentially for migrations or DB related scripts
├── docs/
├── hooks/ # Custom React hooks (e.g., useAuth, useProfile, useSettings)
├── lib/ # Utility functions and shared code
    ├── schemas/ # Zod validation schemas
    ├── stores/  # Zustand store definitions
    ├── mcp.ts   # MCP client for raw SQL
    ├── data-mapper.ts # snake_case <-> camelCase conversion
    ├── error-handling.ts # Centralized error handling utilities
    ├── supabase-client.ts # Examples: supabase.ts, supabase-browser.ts, supabase-server.ts
    └── utils.ts # General utilities like cn()
├── services/ # Service layer for API calls and business logic
└── types/ # TypeScript type definitions
    ├── auth.types.ts
    ├── models.types.ts
    └── supabase.ts # IMPORTANT: This is often a placeholder. Run `supabase gen types typescript --project-id <project-ref> --schema public > src/types/supabase.ts` to populate with actual DB types.
```

### Naming Conventions

- Use lowercase with dashes for directory names (e.g., `components/auth-wizard`)
- Use PascalCase for component files and camelCase for utility/hook/service files
- Use descriptive names that indicate purpose (e.g., `ClientDetailsForm.tsx`)
- Prefix boolean variables with auxiliary verbs (is, has, should)

## TypeScript and Zod Usage

### TypeScript Best Practices

- Use TypeScript for all code; prefer interfaces over types for object shapes where appropriate.
- Use explicit return types for functions, especially for complex return values.
- Avoid `any` type; use proper typing or `unknown` with type guards.
- **Action Required**: Populate `[src/types/supabase.ts](mdc:src/types/supabase.ts)` by running the Supabase CLI command `supabase gen types typescript --project-id <YOUR_PROJECT_ID> --schema public > src/types/supabase.ts` to enable full type safety for Supabase client interactions. Replace `<YOUR_PROJECT_ID>` with your actual Supabase project ID.

### Zod Implementation

- Utilize Zod for schema validation and type inference (schemas in `[src/lib/schemas/](mdc:src/lib/schemas)`).
- Define schemas in separate files for reusability.
- Infer TypeScript types from Zod schemas when possible.

## Supabase Integration

### Authentication

- Use Supabase Auth for user authentication.
- Client Creation: Primarily uses helpers from `@supabase/auth-helpers-nextjs`.
    - `createClientComponentClient` (or wrappers around it like in `[src/lib/supabase.ts](mdc:src/lib/supabase.ts)`) for client components and client-side services.
    - `createMiddlewareClient` in `[src/middleware.ts](mdc:src/middleware.ts)`.
    - `createRouteHandlerClient` in `[src/app/auth/callback/route.ts](mdc:src/app/auth/callback/route.ts)`.
    - `createServerComponentClient` (example in `[src/lib/supabase-server.ts](mdc:src/lib/supabase-server.ts)`) for server components.
- Session Management: Handled via cookies, facilitated by the auth helpers.
- Route Protection: Implemented in `[src/middleware.ts](mdc:src/middleware.ts)` and `[src/app/dashboard/layout.tsx](mdc:src/app/dashboard/layout.tsx)`.

### Authentication Flow

- Login: Use `AuthService.signIn()` (which wraps `supabase.auth.signInWithPassword()`) then redirect.
- Registration: Use `AuthService.signUp()` (which wraps `supabase.auth.signUp()`). Includes pre-check for existing email.
- Password Reset: Uses `AuthService.resetPassword()` and `AuthService.updatePassword()`.
- Logout: Use `AuthService.signOut()` then redirect.
- Auth Callback (`[src/app/auth/callback/route.ts](mdc:src/app/auth/callback/route.ts)`): Uses `supabase.auth.exchangeCodeForSession()`.

### Database Operations

**Preferred Pattern: Direct Supabase JS Client**

- **Primary Method**: Use the Supabase JS client directly for **all standard database operations** (CRUD - Create, Read, Update, Delete) and calling RPC functions.
- **Client Creation**: Utilize helpers from `@supabase/auth-helpers-nextjs` (e.g., `createClientComponentClient`, `createServerComponentClient`) or wrappers like `createClient` from `[src/lib/supabase.ts](mdc:src/lib/supabase.ts)`.
- **Operations**: Use methods like `supabase.from('table_name').select()`, `supabase.from('table_name').insert()`, `supabase.from('table_name').update()`, `supabase.from('table_name').delete()`, and `supabase.rpc('function_name', ...)`. This pattern is seen in services like `ProfileService`, `SettingsService`, `DashboardService`, and should be the default.
    - **Example (Data Sending/Mutation)**: Follow the pattern used in `[src/app/admin/notifications/page.tsx](mdc:src/app/admin/notifications/page.tsx)` for direct client-side inserts/updates where appropriate RLS is in place.
    - **Example (Data Pulling/Fetching)**: Use direct `.select()` or `.rpc()` calls as seen in `ProfileService` or `SettingsService`.
- **Benefits**: Leverages Supabase's built-in RLS directly, simplifies data handling, often provides better type safety (especially with generated types), and aligns with common Supabase usage.
- **Data Mapping**: Use utilities from `[src/lib/data-mapper.ts](mdc:src/lib/data-mapper.ts)` when needed to convert between camelCase (application) and snake_case (database) column names, especially when dealing with data returned from Supabase.

**Legacy/Special Case Pattern: MCP (Model Context Protocol)**

- **Usage**: The MCP flow (`MCP.supabase.query()` -> `[src/app/api/mcp/supabase/route.ts](mdc:src/app/api/mcp/supabase/route.ts)` -> `execute_sql` RPC) should **NO LONGER be used for standard CRUD operations**. Services like `ClientService`, `ProjectService`, `AgencyService` should be refactored (or new code written) to use the direct Supabase JS client pattern.
- **Permitted Use**: MCP *may* be reserved **only** for exceptional cases requiring raw SQL execution via a secure backend mechanism, such as complex reporting queries not suitable for RPCs, schema introspection (`information_schema` queries), or specific permission checks *if* direct Supabase methods are insufficient.
- **Security**: If MCP is used, ensure the `execute_sql` RPC is robust and secure (e.g., `SECURITY DEFINER`, proper input sanitization), and ideally, the backend API route should use secure credentials, not the public anonymous key.

**General Guidelines**

- Implement RLS (Row Level Security) for data protection across all tables. This is critical regardless of the access pattern.
- Use transactions (`supabase.rpc('run_in_transaction', ...)` or similar) for operations that modify multiple tables when appropriate.
- **Automatic Contextual IDs**: When creating data linked to a user or agency (e.g., creating a client), the relevant ID (like `agency_id`) **must** be sourced automatically from the authenticated user's session, profile, or other reliable context. **Do not** include manual input fields for such IDs in user-facing forms (e.g., remove the Agency ID input from the Add Client modal).

### Real-time Subscriptions

- Use Supabase real-time features for collaborative features if needed.
- Implement proper subscription cleanup.
- Handle subscription events efficiently.

## CRM-Specific Guidelines

### Client Management

- Clients belong to agencies (relationship managed via `agency_id` on `clients` or through `agency_clients` table).
- Client data includes: name, email, phone, address, status, notes, etc. (see `[src/types/models.types.ts](mdc:src/types/models.types.ts)` for `ClientModel`).
- Clients can have multiple projects and invoices.

### Invoice Management

- Invoices belong to clients.
- Invoice statuses: draft, sent, paid, overdue (see `InvoiceStatus` enum in `[src/types/models.types.ts](mdc:src/types/models.types.ts)`).
- Invoice items include: description, quantity, price, tax.

### Agency Management

- Agencies have multiple users (`agency_team_members`) with different roles (owner, admin, member - see `AgencyUserRole` enum).
- Agency settings (`agency_settings` table) include: name, logo, address, billing details, notification preferences, team settings, security configurations, and integrations.

## Theming Implementation Guidelines

### When implementing or modifying themes:

- Always check current theme with `const { theme } = useTheme()` and `const isDark = theme === 'dark'` or `theme !== 'light'`.
- Use conditional classes with the `cn()` utility from `[src/lib/utils.ts](mdc:src/lib/utils.ts)`.
- For dark mode UI elements, use zinc/charcoal color palette (#121212, #1C1C1E, zinc-800, etc.).
- For light mode UI elements, maintain the existing white/blue color scheme.
- Implement proper theme hydration handling with mounted state checks if necessary.
- Use frosted glass effect with `backdrop-blur` and semi-transparent backgrounds.
- Add subtle texture effects (e.g., SVG noise patterns) primarily to dark mode, as seen in dashboard and settings pages.

### When creating new UI components:

- Make sure all components are theme-aware from the start.
- Check existing components like `ChartCard`, `MetricCard`, `GlassCard` for reference implementation.
- Use layered effects (gradients, shadows, textures) for depth.
- Implement proper transitions between theme states.
- Use z-index correctly to maintain proper layer order.
- Test components in both light and dark modes.

## AI Assistant Guidelines

### When Generating Code

- Always use TypeScript with proper typing. Ensure `[src/types/supabase.ts](mdc:src/types/supabase.ts)` is populated for Supabase client type safety.
- Follow the project's file structure and naming conventions.
- **Database Interaction**: **Prioritize using the direct Supabase JS client** (`createClient` wrapper or auth helpers -> `supabase.from(...).select/insert/update/delete`, `supabase.rpc(...)`) for **all** standard data reading and writing (CRUD). Refer to services like `ProfileService`, `SettingsService` for examples.
    - **Do NOT use the MCP pattern** (`MCP.supabase.query()`) for new CRUD functionality. If modifying existing MCP-based services (`ClientService`, `ProjectService`, `AgencyService`), prefer refactoring them to use the direct Supabase client pattern.
    - Use `[src/lib/data-mapper.ts](mdc:src/lib/data-mapper.ts)` for camelCase <-> snake_case conversion when interacting with the database.
- **Contextual IDs**: Ensure IDs like `agency_id` are sourced automatically from user context when creating related records (e.g., clients). Do not add manual input fields for these in forms.
- Implement proper error handling and validation.
- Use Zod for data validation (schemas in `[src/lib/schemas/](mdc:src/lib/schemas)`).
- Follow React best practices (hooks, functional components).
- Ensure all UI components support both light and dark themes.

### UI Components

- Use Tailwind CSS for styling, leveraging the `cn()` utility.
- Follow accessibility best practices.
- Implement responsive design (can use `useMediaQuery` hook from `[src/hooks/use-media-query.ts](mdc:src/hooks/use-media-query.ts)`).
- Use semantic HTML elements.
- Ensure all components handle theme changes gracefully.
- Implement proper frosted glass effects and other established styling patterns.

### State Management

- **Global Client-Side State**: Use Zustand (e.g., `[src/lib/stores/auth-store.ts](mdc:src/lib/stores/auth-store.ts)`).
- **Server State**: The project currently uses a pattern of custom React hooks (`useProfile`, `useSettings`, `useDashboardMetrics`, etc.) that call methods from service classes. These services encapsulate data fetching logic. **This differs from previous mentions of React Query.** When managing server state, follow this established custom hook/service pattern unless a migration to React Query is explicitly decided and implemented.
- Minimize the direct use of `useState` and `useEffect` for server state; encapsulate in hooks.

### Error Handling

- Utilize the centralized error handling utilities in `[src/lib/error-handling.ts](mdc:src/lib/error-handling.ts)`.
    - Use `AppError` for custom application errors.
    - Use `handleSupabaseError` to process errors from Supabase database operations.
    - Use `handleAuthError` to generate user-friendly messages from Supabase authentication errors.
- Handle errors and edge cases at the beginning of functions.
- Implement proper error logging and user-friendly error messages via toast notifications (`sonner`) or dedicated UI.
- Handle empty states gracefully (empty lists, no results), often by services returning default empty data.

### Performance

- Use `React.memo` for expensive components.
- Implement `useMemo` and `useCallback` for derived values and callbacks.
- Use virtualization for long lists if performance issues arise.
- Be mindful of data fetching strategies; ensure hooks fetch data efficiently.

### Security

- Validate all user inputs with Zod.
- Implement proper authorization checks (RLS in Supabase, checks in API routes and services).
- Never store sensitive information in local storage directly (Zustand persist middleware handles auth tokens securely if configured correctly with appropriate storage).
- Use HTTPS for all API calls (default with Vercel/Supabase).
- For raw SQL via MCP, ensure the `execute_sql` PostgreSQL function is secure against SQL injection and runs with appropriate privileges.

## Dynamic Project Structure

To ensure this rule file always reflects the latest project structure, run the following command periodically to update it:

```